

// Define interface between the application and the vertex program
struct app_vertex
 {
   float4 Position     : POSITION;
   float4 TexCoord     : TEXCOORD1; 
   float4 Color	       : COLOR0;

};

// Define the interface between the vertex- and the fragment programs
struct vertex_fragment
 {
   float4 Position	  : POSITION; // For the rasterizer
   float4 P           : TEXCOORD0;
   float4 TexCoord	  : TEXCOORD1; 
   float4 Color	      : TEXCOORD2;
   float4 P_world     : TEXCOORD3;
};

struct fragment_out 
{
  float4 Color	    : COLOR0;
};

// Raycasting vertex program implementation
vertex_fragment vertex_main( app_vertex IN )
{    
  vertex_fragment OUT;
  
  // Get OpenGL state matrices
  float4x4 ModelView = glstate.matrix.modelview[0];
  float4x4 ModelViewProj = glstate.matrix.mvp;
 
  // Transform vertex
  OUT.P         = IN.Position;
  OUT.Position 	= mul( ModelViewProj, IN.Position );
  OUT.P_world	= mul( ModelViewProj, IN.Position ); 
  OUT.TexCoord 	= IN.TexCoord;
  OUT.Color 	= IN.Color;
  return OUT;
}

float3 HSVtoRGB(float3 HSV)
{
    float3 RGB = 0;
    float C = HSV.z * HSV.y;
    float H = HSV.x * 6;
    float X = C * (1 - abs(fmod(H, 2) - 1));
    if (HSV.y != 0)
    {
        float I = floor(H);
        if (I == 0) { RGB = float3(C, X, 0); }
        else if (I == 1) { RGB = float3(X, C, 0); }
        else if (I == 2) { RGB = float3(0, C, X); }
        else if (I == 3) { RGB = float3(0, X, C); }
        else if (I == 4) { RGB = float3(X, 0, C); }
        else { RGB = float3(C, 0, X); }
    }
    float M = HSV.z - C;
    return RGB + M;
}

// Raycasting fragment program implementation
fragment_out fragment_main( vertex_fragment   IN,
			                uniform sampler2D tex, 
                            uniform sampler3D volume_tex, 
			                uniform float     stepsize,
			                uniform float     adaptive_mode,
			                uniform float     fill_mode,		  
			                uniform float     xray_mode,
                            uniform float     color_mode  	  
			               ){
  fragment_out OUT;
  float2 texc_world   = ((IN.P_world.xy / IN.P_world.w) + 1) / 2; 
  float4 sample_start = IN.TexCoord; 
  float4 sample_end   = tex2D(tex, texc_world);
  float3 dir = float3(sample_end.x - sample_start.x,
  					  sample_end.y - sample_start.y,
  					  sample_end.z - sample_start.z);
  float  len = length(dir.xyz);
  float3 norm_dir = normalize(dir);
  
  

  float4 col_acc = float4(0,0,0,0);
  float  alpha_acc = 0;
  float  length_acc = 0;
  
  float  delta;
  float3 delta_dir;
  float4 color_sample;
  float  alpha_sample;

  float3 sample_pos = sample_start;
  float lastsample = 0;
  for(int i = 0; i < 1000; i++)
  {
    if(fill_mode){
   	  color_sample = float4(1,1,1,0.1);
    } else {
      color_sample = tex3D(volume_tex,sample_pos);
    }
    if(adaptive_mode){
    	delta = stepsize+color_sample.r/255;
    } else {
    	delta = stepsize;
    }
    alpha_sample =  color_sample.a * delta;
    if(color_mode){
      color_sample = float4(HSVtoRGB(float3((color_sample.r-lastsample)*stepsize/delta,color_sample.r,color_sample.r)),color_sample.a);
      lastsample = color_sample.r;
    }
    col_acc      += (1.0 - alpha_acc) * color_sample * alpha_sample * 3;
    //col_acc.r  += i/50; // COOL
    alpha_acc    += alpha_sample;
    delta_dir    =  norm_dir * delta;
    sample_pos   += delta_dir;
    length_acc   += length(delta_dir);
    if(length_acc >= len || alpha_acc > 1.0) break; 
  }

  
  if(xray_mode){
  	  col_acc=float4(HSVtoRGB(float3(0.55,col_acc.g,col_acc.g*2)),col_acc.a);
  	  col_acc=float4(HSVtoRGB(float3(col_acc.g,1,1)),col_acc.a);
  }
   
   
 
  OUT.Color =  col_acc;
  //OUT.Color =  float4(texc,1,1);
  //OUT.Color =  float4(norm_dir,1);
  return OUT;
}
